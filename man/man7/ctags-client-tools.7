.\" Man page generated from reStructuredText.
.
.TH CTAGS-CLIENT-TOOLS 7 "" "0.0.0" "Universal-ctags"
.SH NAME
ctags-client-tools \- Hints for developing a tool using ctags command and tags output
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.nf
\fBctags\fP [options] [file(s)]
\fBetags\fP [options] [file(s)]
.fi
.sp
.SH DESCRIPTION
.sp
\fBClient tool\fP means a tool running the ctags command
and/or reading a tags file generated by ctags command.
This man page gathers hints for people who develop client tools.
.SH PSEUDO-TAGS
.sp
\fBPseudo\-tags\fP, stored in a tag file, indicate how
ctags generated the tags file: whether the
tags file is sorted or not, which version of tags file format is used,
the name of tags generator, and so on. The opposite term for
pseudo\-tags is \fBregular\-tags\fP\&. A regular\-tag is for a language
object in an input file. A pseudo\-tag is for the tags file
itself. Client tools may use pseudo\-tags as reference for processing
regular\-tags.
.sp
A pseudo\-tag is stored in a tags file in the same format as
regular\-tags as described in tags(5), except that pseudo\-tag names
are prefixed with "!_". For the general information about
pseudo\-tags, see "TAG FILE INFORMATION" in tags(5).
.sp
An example of a pseudo tag:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
!_TAG_PROGRAM_NAME      Universal Ctags /Derived from Exuberant Ctags/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The value, "2", associated with the pseudo tag "TAG_PROGRAM_NAME", is
used in the field for input file. The description, "Derived from
Exuberant Ctags", is used in the field for pattern.
.sp
Universal\-ctags extends the naming scheme of the classical pseudo\-tags
available in Exuberant\-ctags for emitting language specific
information as pseudo tags:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
!_{pseudo\-tag\-name}!{language\-name}     {associated\-value}      /{description}/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The language\-name is appended to the pseudo\-tag name with a separator, "!".
.sp
An example of pseudo tag with a language suffix:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
!_TAG_KIND_DESCRIPTION!C        f,function      /function definitions/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This pseudo\-tag says "the function kind of C language is enabled
when generating this tags file." \fB\-\-pseudo\-tags\fP is the option for
enabling/disabling individual pseudo\-tags. When enabling/disabling a
pseudo tag with the option, specify the tag name only
"TAG_KIND_DESCRIPTION", without the prefix ("!_") or the suffix ("!C").
.SS Options for Pseudo\-tags
.INDENT 0.0
.TP
.B \fB\-\-extras=+p\fP (or \fB\-\-extras=+{pseudo}\fP)
Forces writing pseudo\-tags.
.sp
ctags emits pseudo\-tags by default when writing tags
to a regular file (e.g. "tags\(aq.) However, when specifying \fB\-o \-\fP
or \fB\-f \-\fP for writing tags to standard output,
ctags doesn\(aqt emit pseudo\-tags. \fB\-\-extras=+p\fP or
\fB\-\-extras=+{pseudo}\fP will force pseudo\-tags to be written.
.TP
.B \fB\-\-list\-pseudo\-tags\fP
Lists available types of pseudo\-tags and shows whether they are enabled or disabled.
.sp
Running ctags with \fB\-\-list\-pseudo\-tags\fP option
lists available pseudo\-tags. Some of pseudo\-tags newly introduced
in Universal\-ctags project are disabled by default. Use
\fB\-\-pseudo\-tags=...\fP to enable them.
.TP
.B \fB\-\-pseudo\-tags=[+|\-]names|*\fP
Specifies a list of pseudo\-tag types to include in the output.
.sp
The parameters are a set of pseudo tag names. Valid pseudo tag names
can be listed with \fB\-\-list\-pseudo\-tags\fP\&. Surround each name in the set
with braces, like "{TAG_PROGRAM_AUTHOR}". You don\(aqt have to include the "!_"
pseudo tag prefix when specifying a name in the option argument for \fB\-\-pseudo\-tags=\fP
option.
.sp
pseudo\-tags don\(aqt have a notation using one\-letter flags.
.sp
If a name is preceded by either the \(aq+\(aq or \(aq\-\(aq characters, that
tags\(aqs effect has been added or removed. Otherwise the names replace
any current settings. All entries are included if \(aq*\(aq is given.
.TP
.B \fB\-\-fields=+E\fP (or \fB\-\-fields=+{extras}\fP)
Attach "extras:pseudo" field to pseudo\-tags.
.sp
An example of pseudo tags with the field:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
!_TAG_PROGRAM_NAME      Universal Ctags /Derived from Exuberant Ctags/  extras:pseudo
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the name of a normal tag in a tag file starts with "!_", a
client tool cannot distinguish whether the tag is a regular\-tag or
pseudo\-tag.  The fields attached with this option help the tool
distinguish them.
.UNINDENT
.SS List of notable pseudo\-tags
.sp
Running ctags with \fB\-\-list\-pseudo\-tags\fP option lists available types
of pseudo\-tags with short descriptions. This subsection shows hints
for using notable ones.
.INDENT 0.0
.TP
.B \fBTAG_EXTRA_DESCRIPTION\fP  (new in Universal\-ctags)
Indicates the names and descriptions of enabled extras:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
!_TAG_EXTRA_DESCRIPTION       {extra\-name}    /description/
!_TAG_EXTRA_DESCRIPTION!{language\-name}       {extra\-name}    /description/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If your tool relies on some extra tags (extras), refer to
the pseudo\-tags of this type. A tool can reject the tags file that
doesn\(aqt include expected extras, and raise an error in an early
stage of processing.
.sp
An example of the pseudo\-tags:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
$ ctags \-\-extras=+p \-\-pseudo\-tags=\(aq{TAG_EXTRA_DESCRIPTION}\(aq \-o \- input.c
!_TAG_EXTRA_DESCRIPTION       anonymous       /Include tags for non\-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION       fileScope       /Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION       pseudo  /Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION       subparser       /Include tags generated by subparsers/
\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A client tool can know "{anonymous}", "{fileScope}", "{pseudo}",
and "{subparser}" extras are enabled from the output.
.TP
.B \fBTAG_FIELD_DESCRIPTION\fP  (new in Universal\-ctags)
Indicates the names and descriptions of enabled fields:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
!_TAG_FIELD_DESCRIPTION       {field\-name}    /description/
!_TAG_FIELD_DESCRIPTION!{language\-name}       {field\-name}    /description/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If your tool relies on some fields, refer to the pseudo\-tags of
this type.  A tool can reject a tags file that doesn\(aqt include
expected fields, and raise an error in an early stage of
processing.
.sp
An example of the pseudo\-tags:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
$ ctags \-\-fields\-C=+\(aq{macrodef}\(aq \-\-extras=+p \-\-pseudo\-tags=\(aq{TAG_FIELD_DESCRIPTION}\(aq \-o \- input.c
!_TAG_FIELD_DESCRIPTION       file    /File\-restricted scoping/
!_TAG_FIELD_DESCRIPTION       input   /input file/
!_TAG_FIELD_DESCRIPTION       name    /tag name/
!_TAG_FIELD_DESCRIPTION       pattern /pattern/
!_TAG_FIELD_DESCRIPTION       typeref /Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C     macrodef        /macro definition/
\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A client tool can know "{file}", "{input}", "{name}", "{pattern}",
and "{typeref}" fields are enabled from the output.
The fields are common in languages. In addition to the common fields,
the tool can known "{macrodef}" field of C language is also enabled.
.TP
.B \fBTAG_FILE_ENCODING\fP  (new in Universal\-ctags)
TBW
.TP
.B \fBTAG_FILE_FORMAT\fP
See also tags(5).
.TP
.B \fBTAG_FILE_SORTED\fP
See also tags(5).
.TP
.B \fBTAG_KIND_DESCRIPTION\fP (new in Universal\-ctags)
Indicates the names and descriptions of enabled kinds:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
!_TAG_KIND_DESCRIPTION!{language\-name}        {kind\-letter},{kind\-name}       /description/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If your tool relies on some kinds, refer to the pseudo\-tags of
this type.  A tool can reject the tags file that doesn\(aqt include
expected kinds, and raise an error in an early stage of
processing.
.sp
Kinds are language specific, so a language name is  always
appended to the tag name as suffix.
.sp
An example of the pseudo\-tags:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
$ ctags \-\-extras=+p \-\-kinds\-C=vfm \-\-pseudo\-tags=\(aq{TAG_KIND_DESCRIPTION}\(aq \-o \- input.c
!_TAG_KIND_DESCRIPTION!C      f,function      /function definitions/
!_TAG_KIND_DESCRIPTION!C      m,member        /struct, and union members/
!_TAG_KIND_DESCRIPTION!C      v,variable      /variable definitions/
\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A client tool can know "{function}", "{member}", and "{variable}"
kinds of C language are enabled from the output.
.TP
.B \fBTAG_KIND_SEPARATOR\fP (new in Universal\-ctags)
TBW
.TP
.B \fBTAG_OUTPUT_FILESEP\fP (new in Universal\-ctags)
TBW
.TP
.B \fBTAG_OUTPUT_MODE\fP (new in Universal\-ctags)
TBW
.TP
.B \fBTAG_PATTERN_LENGTH_LIMIT\fP (new in Universal\-ctags)
TBW
.TP
.B \fBTAG_PROC_CWD\fP (new in Universal\-ctags)
Indicates the working directory of ctags during processing.
.sp
This pseudo\-tag helps a client tool solve the absolute paths for
the input files for tag entries even when they are tagged with
relative paths.
.sp
An example of the pseudo\-tags:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
$ cat tags
!_TAG_PROC_CWD        /tmp/   //
main  input.c /^int main (void) { return 0; }$/;"     f       typeref:typename:int
\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
From the regular tag for "main", the client tool can know the
"main" is at "input.c".  However, it is a relative path. So if the
directory where ctags run and the directory
where the client tool runs are different, the client tool cannot
find "input.c" from the file system. In that case,
\fBTAG_PROC_CWD\fP gives the tool a hint; "input.c" may be at "/tmp".
.TP
.B \fBTAG_PROGRAM_NAME\fP
TBW
.UNINDENT
.SH REDUNDANT-KINDS
.sp
TBW
.SH MULTIPE-LANGUAGES FOR AN INPUT FILE
.sp
TBW
.SH UTILIZING READTAGS
.sp
TBW
.SH SEE ALSO
.sp
ctags(1), ctags\-incompatibilities(7), tags(5)
.\" Generated by docutils manpage writer.
.
